// Code generated by go-swagger; DO NOT EDIT.

package range_restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RangeSearchHandlerFunc turns a function with the right signature into a range search handler
type RangeSearchHandlerFunc func(RangeSearchParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RangeSearchHandlerFunc) Handle(params RangeSearchParams) middleware.Responder {
	return fn(params)
}

// RangeSearchHandler interface for that can handle valid range search params
type RangeSearchHandler interface {
	Handle(RangeSearchParams) middleware.Responder
}

// NewRangeSearch creates a new http.Handler for the range search operation
func NewRangeSearch(ctx *middleware.Context, handler RangeSearchHandler) *RangeSearch {
	return &RangeSearch{Context: ctx, Handler: handler}
}

/* RangeSearch swagger:route GET /range/{hashPrefix} range rangeSearch

Search password hashes by range.

*/
type RangeSearch struct {
	Context *middleware.Context
	Handler RangeSearchHandler
}

func (o *RangeSearch) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRangeSearchParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
